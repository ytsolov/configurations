
#Black        0;30     Dark Gray     1;30
#Red          0;31     Light Red     1;31
#Green        0;32     Light Green   1;32
#Brown/Orange 0;33     Yellow        1;33
#Blue         0;34     Light Blue    1;34
#Purple       0;35     Light Purple  1;35
#Cyan         0;36     Light Cyan    1;36
#Light Gray   0;37     White         1;37

RAW_COLOR_BLACK="\e[0;30m"
RAW_COLOR_RED="\e[0;31m"
RAW_COLOR_GREEN="\e[0;32m"
RAW_COLOR_BROWN="\e[0;33m"
RAW_COLOR_BLUE="\e[1;34m"
RAW_COLOR_PURPLE="\e[0;35m"
RAW_COLOR_CYAN="\e[0;36m"
RAW_COLOR_WHITE="\e[1;30m"
RAW_COLOR_YELLOW="\e[1;33m"
RAW_COLOR_LIGHT_CYAN="\e[1;36m"
RAW_COLOR_RESET="\e[0m"

GCOLOR_BLACK="\[${RAW_COLOR_BLACK}\]"
GCOLOR_RED="\[${RAW_COLOR_RED}\]"
GCOLOR_GREEN="\[${RAW_COLOR_GREEN}\]"
GCOLOR_BROWN="\[${RAW_COLOR_BROWN}\]"
GCOLOR_BLUE="\[${RAW_COLOR_BLUE}\]"
GCOLOR_PURPLE="\[${RAW_COLOR_PURPLE}\]"
GCOLOR_CYAN="\[${RAW_COLOR_CYAN}\]"
GCOLOR_WHITE="\[${RAW_COLOR_WHITE}\]"
GCOLOR_YELLOW="\[${RAW_COLOR_YELLOW}\]"
GCOLOR_LIGHT_CYAN="\[${RAW_COLOR_CYAN_LIGHT}\]"
GCOLOR_RESET="\[${RAW_COLOR_RESET}\]"

FCOLOR_BLACK="\001${RAW_COLOR_BLACK}\002"
FCOLOR_RED="\001${RAW_COLOR_RED}\002"
FCOLOR_GREEN="\001${RAW_COLOR_GREEN}\002"
FCOLOR_BROWN="\001${RAW_COLOR_BROWN}\002"
FCOLOR_BLUE="\001${RAW_COLOR_BLUE}\002"
FCOLOR_PURPLE="\001${RAW_COLOR_PURPLE}\002"
FCOLOR_CYAN="\001${RAW_COLOR_CYAN}\002"
FCOLOR_WHITE="\001${RAW_COLOR_WHITE}\002"
FCOLOR_YELLOW="\001${RAW_COLOR_YELLOW}\002"
FCOLOR_LIGHT_CYAN="\001${RAW_COLOR_CYAN_LIGHT}\002"
FCOLOR_RESET="\001${RAW_COLOR_RESET}\002"

TPUT_BOLD="$(tput bold 1)"
TPUT_RESET="$(tput sgr0)"
GTPUT_BOLD="\[${TPUT_BOLD}\]"
GTPUT_RESET="\[${TPUT_RESET}\]"
FTPUT_BOLD="\001${TPUT_BOLD}\002"
FTPUT_RESET="\001${TPUT_RESET}\002"

___ArraY___=(☺ ☻ ♥ ♦ ♣ ♠ • ◘ ○ ◙ ♂ ♀ ♪ ♫ ☼ ► ◄ ↕ ‼ ¶ § ▬ ↨ ↑ ↓ → ← ∟ ↔ ▲ ▼)
function gen_lucky_charm() {
    local exit_status="$?"
    local ___IndeX___=$(( $RANDOM % ${#___ArraY___[*]} ))
    echo "${___ArraY___[$___IndeX___]}"
    return ${exit_status}
}

FIRST_TIME=true
function do_first_time () {
    local exit_status="$?"
    if [ -z $FIRST_TIME ]; then
        echo ""
    else
        unset FIRST_TIME
    fi

    return $___ExiT_StatuS___
}

function do_git() {
    if [ $(set | grep "^\<__git_ps1\>" | wc -l) -ne 0 ]; then
        __git_ps1
    fi
}

function fdate() {
    date +'%T:%N' | cut -c 1-12
}

function set_ps1() {
    export PS1='${debian_chroot:+($debian_chroot)}''$(ps_time):$(ps_user_host):$(ps_path "\\\w") $(ps_lucky_charm) $(ps_git)\n$(ps_return) '
}

if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    ___color_prompt___="yes"
else
    unset ___color_prompt___
fi

function prompt_command() {
    do_first_time
    set_ps1
}

PROMPT_COMMAND='prompt_command'

###############################
function ps_time() {
    local exit_status="$?"
    local brown
    local cend

    if [ "${___color_prompt___}" = yes ]; then
        brown="${FCOLOR_BROWN}"
        cend="${FCOLOR_RESET}"
    fi

    echo -ne "${brown}[$(fdate)]${cend}"

    return ${exit_status}
}

function ps_ssh() {
    if [ $(echo "${SSH_CLIENT}" | wc -w) -ne 0 ]; then
        if [ "${___color_prompt___}" = yes ]; then
            local cyan="${FCOLOR_CYAN}"
            local cend="${FCOLOR_RESET}"
        fi

        set -- ${SSH_CLIENT}
        local ripaddr=${1}
        local rport=${2}
        local lport=${3}
        echo "{${cyan}ssh ${ripaddr}:${rport}${cend}}"
    fi
}

function ps_user_host() {
    local exit_status="$?"
    local cyan
    local cend

    if [ "${___color_prompt___}" = yes ]; then
        cyan="${FCOLOR_CYAN}"
        cend="${FCOLOR_RESET}"
    fi

    echo -ne "${cyan}$(whoami)${cend}@${cyan}$(hostname)${cend}$(ps_ssh)"

    return ${exit_status}
}

function ps_path() {
    local exit_status="$?"
    local path=${1:-$(pwd)}
    local blue
    local cend

    if [ "${___color_prompt___}" = yes ]; then
        blue="${FCOLOR_BLUE}"
        cend="${FCOLOR_RESET}"
    fi

    echo -ne "${blue}${path}${cend}"

    return ${exit_status}
}

function ps_lucky_charm() {
    local exit_status="$?"
    local purple
    local cend

    if [ "${___color_prompt___}" = yes ]; then
        purple="${FCOLOR_PURPLE}"
        cend="${FCOLOR_RESET}"
    fi

    echo -ne "${purple}[$(gen_lucky_charm)]${cend}"

    return ${exit_status}
}

function ps_git() {
    local exit_status="$?"
    local green
    local cend

    if [ "${___color_prompt___}" = yes ]; then
        green="${FCOLOR_GREEN}"
        cend="${FCOLOR_RESET}"
    fi

    echo -ne "${green}$(do_git)${cend}"

    return ${exit_status}
}

function ps_return() {
    local exit_status="$?"
    local green
    local red
    local cend

    if [ "${___color_prompt___}" = yes ]; then
        green="${FCOLOR_GREEN}"
        red="${FCOLOR_RED}"
        cend="${FCOLOR_RESET}"
    fi

    if [ ${exit_status} -eq 0 ]; then
        echo -ne "${green}(${exit_status})${cend} ${FTPUT_BOLD}\$${FTPUT_RESET}"
    else
        echo -ne "${red}(${exit_status})${cend} ${FTPUT_BOLD}\$${FTPUT_RESET}"
    fi

    return ${exit_status}
}

###############################

preexec () {
    local end_time="$(fdate)"
    local blue
    local cend

    if [ "${___color_prompt___}" = yes ]; then
        blue="${FCOLOR_BLUE}"
        cend="${FCOLOR_RESET}"
    fi

    # ISSUES:
    #  * Should go always to the first line, so that it doesn't break when first line is wrapped
    #  * Should not overwrite text
    #local end_time="[$(fdate)]"
    #printf "\033[s"                             # save cursor position
    #printf "\033[2A"                            # move cursor one line up
    #printf "\033[$((${COLUMNS}-${#end_time}))C" # move cursor at the end
    #printf "${FCOLOR_RED}${end_time}${FCOLOR_RESET}"
    #printf "\033[u"                             # restore cursor position

    # Overwrite existing time with the time of command execution
    printf "\033[s"                             # save cursor position
    printf "\033[2A"                            # move cursor one line up
    printf "\033[0C" # move cursor at the end
    printf "${blue}${end_time}${cend}"
    printf "\033[u"                             # restore cursor position
}
preexec_invoke_exec () {
    [ -n "$COMP_LINE" ] && return  # do nothing if completing
    [ "$BASH_COMMAND" = "$PROMPT_COMMAND" ] && return # don't cause a preexec for $PROMPT_COMMAND
    case "$-" in
        *s*)    # Is command read from stdin or not
            preexec
            ;;
        *)
            ;;
    esac
}
trap 'preexec_invoke_exec' DEBUG

#unset RAW_COLOR_BLACK
#unset RAW_COLOR_RED
#unset RAW_COLOR_GREEN
#unset RAW_COLOR_BROWN
#unset RAW_COLOR_BLUE
#unset RAW_COLOR_PURPLE
#unset RAW_COLOR_CYAN
#unset RAW_COLOR_WHITE
#unset RAW_COLOR_YELLOW
#unset RAW_COLOR_LIGHT_CYAN
#unset RAW_COLOR_RESET
#
#unset GCOLOR_BLACK
#unset GCOLOR_RED
#unset GCOLOR_GREEN
#unset GCOLOR_BROWN
#unset GCOLOR_BLUE
#unset GCOLOR_PURPLE
#unset GCOLOR_CYAN
#unset GCOLOR_WHITE
#unset GCOLOR_YELLOW
#unset GCOLOR_LIGHT_CYAN
#unset GCOLOR_RESET
#
#unset FCOLOR_BLACK
#unset FCOLOR_RED
#unset FCOLOR_GREEN
#unset FCOLOR_BROWN
#unset FCOLOR_BLUE
#unset FCOLOR_PURPLE
#unset FCOLOR_CYAN
#unset FCOLOR_WHITE
#unset FCOLOR_YELLOW
#unset FCOLOR_LIGHT_CYAN
#unset FCOLOR_RESET
#
#unset TPUT_BOLD
#unset TPUT_RESET
#unset GTPUT_BOLD
#unset GTPUT_RESET
#unset FTPUT_BOLD
#unset FTPUT_RESET

